/*
Найдите наименьшее целое число в массиве

Учитывая массив целых чисел, ваше решение должно найти наименьшее целое число.

Например:

Учитывая, что [34, 15, 88, 2]ваше решение вернется2
Учитывая, что [34, -345, -1, 100]ваше решение вернется-345
Для целей этого ката можно предположить, что предоставленный массив не будет пустым.
*/

public class FindSmallestIntegerArray {

    public static int findSmallestInt(int[] args) {

        int min = args[0]; // Предполагаем, что первый элемент - минимальный

        for (int i = 1; i < args.length; i++) {
            if (args[i] < min) {
                min = args[i]; // Обновляем минимум, если нашли меньший элемент
            }
        }
        return min;
    }

    public static void main(String[] args) {
        int[] array1 = {34, 15, 88, 2};
        int[] array2 = {34, -345, -1, 100};

        System.out.println(findSmallestInt(array1)); // Выведет 2
        System.out.println(findSmallestInt(array2)); // Выведет -345
    }
}

/*
Инициализация минимума:
Начинаем с предположения, что первый элемент массива — это минимальное значение.

Проход по массиву:
Проходим по оставшимся элементам массива, начиная со второго.

Сравнение и обновление:
Если текущий элемент меньше текущего минимума, обновляем значение минимума.

Возврат результата:
После прохода по всем элементам возвращаем найденный минимум.

Этот подход гарантирует, что мы найдем наименьший элемент в массиве за линейное время O(n), где n — количество элементов в массиве.
*/

/*
public static int findSmallestInt(int[] args) {
        return IntStream.of(args).min().getAsInt();
  }

Подробное объяснение:
1 IntStream.of(args):
IntStream — это специальный поток (Stream) для примитивных int, который предоставляет удобные методы для работы с числами.
IntStream.of(args) создаёт поток из массива args.
Пример:
int[] numbers = {34, -345, -1, 100};
IntStream stream = IntStream.of(numbers); // Создаёт поток: 34, -345, -1, 100

2 .min()
Возвращает OptionalInt — контейнер, который может содержать (или не содержать) минимальное значение.
Если массив пустой, метод .min() вернёт OptionalInt.empty().
Пример:
OptionalInt minOptional = IntStream.of(34, -345, -1, 100).min();  // minOptional содержит -345

3 .getAsInt()
Если поток не пустой, метод .getAsInt() возвращает минимальное значение.
Если поток пустой (например, IntStream.of().min()), выбросит NoSuchElementException.
В условии задачи сказано, что массив не пустой, поэтому можно смело использовать .getAsInt().
*/